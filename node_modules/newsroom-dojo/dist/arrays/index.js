function n(n,r){return Array.isArray(r)?r.some((r=>n.includes(r))):n.includes(r)}function r(n,r){return Array.isArray(r)?r.filter((r=>!n.includes(r))):n.includes(r)?[]:r}function t(n){const r=[];return n.forEach((n=>{r.includes(n)||r.push(n)})),r}function e(n,r){return n.reduce(((n,t)=>n+t[r]),0)}function u(n){let r=n.length;for(;r>0;){const t=Math.floor(Math.random()*r);r--,[n[r],n[t]]=[n[t],n[r]]}return n}function o(n,r){return n.filter((n=>n%r==0))}function c(n,r){return Array.isArray(r)?r.filter((r=>n.includes(r))):n.includes(r)?r:[]}function i(n){const r=Object.create(null);for(const t of n){if(t in r)return!0;r[t]=!0}return!1}function f(n,r){let t=n.length;for(;t>0&&n[t-1]<=r;)t--;return t}function s(n,r){let t,e=1/0;for(const u of n){const n=Math.abs(r-u);n<e&&(e=n,t=u)}return t}function l(n,r){return n.reduce(((n,t,e)=>{const u=Math.floor(e/r);return n[u]=[].concat(n[u]||[],t),n}),[])}export{l as chunkArrayInGroups,n as contains,s as getClosest,f as getNextHighestIndex,i as has_duplicates,c as match_array,o as multiples,u as shuffle,e as sum,t as unique,r as unmatched_array};
